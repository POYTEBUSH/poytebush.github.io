[
    {
        "Title": "Final Year Project - Beliveability of AI agents",
        "Subtitle": "Exploring what approaches can be applied to AI Agents to make them appear more human.",
        "Thumbnail": "AIBase.jpg",
        "ContentGallery" : "",
        "ContentText": "<h4>Introduction</h4> <p>Artificial Intelligence in computer games is used to enhance the gameplay through increasing the population and interaction it offers to the players. This study aims to look at the approaches taken to improve Artificial intelligent (AI) human based agents such as troops in a military simulator or NPC’s in MMORPG’s. The aforementioned AI agents must follow human-like actions and approaches to issues to make them appear less robotic and pre-calculated. </p> <p> One major issue with AI Agents is that due to the complexity of their actions they are often pre-programmed to perform actions in the best possible way, this however to the human eye may not seem the smartest of options. An example of this is in path-finding where the AI agent will choose to take the shortest route without any application to forward which in comparison a human might opt to cut corners or take a longer route which in hindsight might be safer. The aim of my research is to analyse and compare different approaches made in the games industry to improve the appearance of AI agents with the aim to make them appear more like human controlled characters and less out of place </p> <p> My aim for this study is to analyse multiple techniques in order to create an AI system to play <a href='https://en.wikipedia.org/wiki/AssaultCube'>Assaulty Cube</a> which is a Free Open Source FPS game built on the <a href='http://cubeengine.com/cube.php4'>CUBE Engine</a>. </p> <p> This study is currently on-going and will be completed along side documentation and a thesis report. </p>",
        "Categories": "c++,ai,visualstudio"
    },
    {
        "Title": "Low Level Programming",
        "Subtitle": "Optimisation of a simple raytracing application with multiple low level techniques.",
        "Thumbnail": "raytracersphere.png",
        "ContentGallery" : "img~\\Thumbnails\\llfigure1.PNG,img~\\Thumbnails\\llfigure2.PNG,img~\\Thumbnails\\llfigure3.PNG,img~\\Thumbnails\\llfigure4.PNG,img~\\Thumbnails\\llfigure5.PNG,img~\\Thumbnails\\llfigure6.PNG,img~\\Thumbnails\\llfigure7.PNG,img~\\Thumbnails\\llfigure8.PNG,img~\\Thumbnails\\llfigure9.PNG",
        "ContentText": "<h4>Optimisations and Tabulated Data</h4> <h5>Start to End Frame Times</h5> <p>Multiple optimisations have been made to the code base of the ray tracing application to increase the speed of render. As you can see from the data shown below, in tests using two different systems with different CPUs. Both systems use 16GB of RAM and are running on a local Hard Drive. The graph [Figure 1] shows the increase overall from the starting code to the final product when run, the improvements on the i7 4770k lead to an improvement of 36.5 times faster, with the Xeon running 30.4 times faster also. </p> <h5>O0 and O2 Optimisation Levels</h5> <p> When utilising the C++ compiler settings for a release of the ray tracing applications two options were used and tested. O0 offers no optimisation improvements and O2 offers improvements to the compile which favours speed over the size of the final solution. Regardless of the system that is being used, it can be noted that using O2 compiler settings will make the system between 7-10 times faster (i7 at 9.2 times and Xeon at 7.3 times faster). </p> <h5>Floating Point Precision Optimisations</h5> <p> Using the floating point precision level of fast over the default precise as shown in Figure 4 improves the speed of the fully threaded application by around 0.2seconds for each frame, This also meant that there was no reason code any improved solution such as (Anon., n.d.) where  the speed was either the same or slightly slower. </p> <h5>Threading Optimisations</h5> <p> reading the application allowed for the system to utilise all of its resources on rendering the images, the application automatically calculates the number of threads that are available to the application and divides the screen up into that amount of chunks, this allows for each section of the render to be calculated on a different thread improving the speed drastically. The graph shown in [Figure 4] shows the vast increase in render speeds when threading is enabled, The Xeon was able to render 2.4 times faster when using all 4 cores available and the i7 3.2 times faster when using all 8 cores. It should be noticed that both CPUs architecture are over 5 years old and newer CPUs will be able to offer far improved speeds. It is also noted that the number of cores will not exponentially improve the speed of the application. .</p> <h5>Data Structure Optimisations</h5> <p>One of the optimisations that were performed on the application was to develop a templated Linked List, this allowed easier removal and adding to the list when compared to the pre-existing use of a vector, this structure was used to hold all Sphere data that was loaded in. The sphere data, in the beginning, was cleared and repopulated each frame, this allowed for a reduction in each frame time as the spheres didn’t require a recreation. The largest optimisation to the data structure, however, was re-using the Vec3f used to contain the image data, originally this data source was reinitialised each frame and then deleted, this was not necessary as once the image had been exported to a file it was no longer needed in the application, rather than deleting and recreating a clean object it was simply improved to just overwrite the original one, moving the initialisation of the object to the constructor.</p> <p>The image Vec3f was also set up as a float, when using a 1080p image it would be 24Mb (24883200 bytes) in memory size, this image object is used throughout the app to hold the colour data that is then output to a file, when the file is output each value was converted to an unsigned char (max value of 255, similar to colours), by changing the image to be unsigned chars from the beginning, not only reduces the file size down to 6Mb (6220800 bytes)  but removes the requirement to cast any data before it is saved to a file.</p> <h5>Raytracer Optimisations</h5> <p>One of the major changes to the ray tracer was reducing the number of time the dot product is called, due to the dot product being commutable, the calculation for the dot product of raydir and hit was called 4-5 times a render, Along with this, moving the check for if you have exceeded the max trace depth to the beginning of the method removed the need to calculate multiple values that in turn would be wasted time. As you can see from [Figure 7] the improvements to the ray tracer have made the application run each frame over 2 times faster (2.26 times). Through the ray tracer, there were a lot of areas where floats and doubles were being combined, by turning all values into floats any conversions were removed</p> <h5>File IO Optimisations</h5> <p>One optimisation on file IO was to use remove the need to cast objects each save, as previously mentioned this was applied on return from the trace function, this allowed for the casting to be handled in the treads and reduced the number of calls to the ofstream each frame (reduced a call per pixel which at 1080p is 2,073,600 times). The most major improvement to the file IO, however, was to use ofstream write, we already had the image pointer full of all the data and the length of it (pixel count * 3 for RGB values), this meant we could simply pass this data to ofstream write as a buffer and therefore only call the ofstream once</p> <h5>PS4 Optimisations</h5> <p>Porting to the PS4 has been an overly successful venture, all the ray tracer improvements including all the compiler optimisations, data structure and threading optimisations were added with little difficulty. We can see from the data shown in [Figure 9] that the PS4 optimisations lead to a vast improvement of speed, when utilising all threads available the frame time increase close to 2 times faster. One issue found with the PS4 port however was due to the Devkit being accessed remotely the files were streamed back to the computer causing a small transfer delay. Due to the PS4 being run on a different OS certain features of the C++ standard library were not included by default, firstly attempting to allocate blocks of memory using the LinearAllocator on the onion bus fixed the issue of not being able to use the new and delete key words, upon further investigation of the SDK documentation I was able to include the required files and get the new and delete key words working. Attempting to implement the memory management feature caused a few problems however, one of the biggest issues was linked to the issues caused by a lack of the new and delete keyword, using the LinearAllocator allocated a block of memory like a memory pool, when attempting to free that block of memory in delete required access to the original LinearAllocator. When the LinearAllocator was replaced with new and delete this issue was removed. Another issue with the memory allocator was with the Heap Factory, for an unknown reason at certain sections of the code the Heaps allocation number along with other sections are reset to default values, the one thought on this was linked to the data being part of a static class, this could cause issues with random other sections of the code overwriting or clearing the memory block unexpectedly</p>",
        "Categories": "c++,visualstudio"
    },
    {
        "Title": "We All Die Poor",
        "Subtitle": "UKIE 2018 Submission - Best game at Staffordshire University",
        "Thumbnail": "wealldieyoungmain.PNG",
        "ContentGallery" : "img~\\Thumbnails\\wealldieyoung.PNG",
        "ContentText": "<h4>Introduction</h4> <p>This game was created in Unity using C#. The theme of this Game Jam was \"Change\". Working in a team of 5 we set out to draw up some ideas, bouncing these ideas around we soon agreed on using change from a monetary perspective. </p> <iframe width='100%' height='450px' src='https://www.youtube.com/embed/xFz9gQKbB14' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe> <h4>Submission Notes</h4> <p> We chose to take the theme of change in a different direction. Our idea is that you have a pocket full of different coins, in other words “change” and you then must use that as your ammunition to survive an endless wave of zombies. This tied in to having an educational aspect to it where you must shoot the correct amount of coins at the zombies to kill them. </p> <h4>The Aim</h4> <p> Playing as a stationary character, the aim of the game is to hand out the correct change to the incomming zombies. If a zombie reaches you, you lose a life. The aim is to kill the zombies by handing the correct change to them, to switch between coins simply use the 1-7 keys. The least amount of coins given in an exchange, the more points are earnt, the player cannot give more change than they have. </p> <h4>My Tasks</h4> <p> My tasks for the Game Jam was to manage the games shared data, game over, handling of scores and the in-game UI. The games shared data needed to be available to each user, due to time constraints and for simplicity I decided to use a Singleton pattern to handle all scoring and lives the player might have, being able to always access the same \"Player\" object was important. The game system handled lives, as previously mentioned these lives are gained and lost throughout the game and required easy updating, the UI would also need to show the correct number of hearts that the player had. An extra feature I worked on required the use of C# Timers, part of the scoring mechanic was how long the player could last, utilising the C# timer we were able to cleanly update the UI with second based time steps. I was able to improve my knowledge mainly on Unity's UI systems due to the amount of items we needed to display </p><h4>Bitbucket</h4>&nbsp;<a href='https://bitbucket.org/b015133f/p.r.o.a.b.-ukie-game-jam/src/master/' target='_blank'>Link</a>",
        "Categories": "c#,visualstudio,unity,groupbased"
    },
    {
        "Title": "Catalyst Engine",
        "Subtitle": "RTS Engine created in C++ using SDL2.",
        "Thumbnail": "CatalystLogo.bmp",
        "ContentGallery" : "img~\\Thumbnails\\catalysenginescreen1.PNG",
        "ContentText": "<h4>Introduction</h4> <p>Catalyst engine is coded in C++ using the SDL2 Graphics API. The engine is 2D and is aimed at RTS games and utilises a tile based map system. This project is currently on-going and involves the creation of the engine, followed by a game made with it. My role in the development involved being the team leader, organising meetings and managing the work-load of each team member. This module will also later require submission of design documentation on each section of the code. </p> <h4>My Involvement</h4> <p> My current involvement in the engine started with the base SDL2 render-loop and the map. The map is loaded in from an XML (Tiny-XML), each map tile is store with it's relevant information and it's texture is pooled to ensure reduced memory useage. The map features A* pathfinding which is improved from a previous project to be more optimised and work with the map layout. Each map tile has a state to determine whether it's impassable and interactable, defining the pathfinding and interactions the map supplies. <br> Later into the development the team noticed that inheritance and polymorphism were starting to create classes that had unnecessary. To combat this issue the team agreed on replicating a similar approach that is used by Unity, an Entity, Component based System. By following a tutorial &nbsp;<a href='https://www.youtube.com/watch?v=XsvI8Sng6dk'>Link</a>&nbsp;, I was able to learn the use of a bitmap to ensure that an entity can only have one of any type of component. The creation of this ECS allowed us to easilly create different types of objects dynamically, the plan is to load in each type of entity from XML and pool those entities when required. </p>",
        "Categories": "c++,sdl,visualstudio"
    },
    {
        "Title": "AI Modules",
        "Subtitle": "Additional modules in AI from Third years of Uni",
        "Thumbnail": "CatalystLogo.bmp",
        "ContentGallery" : "",
        "ContentText": "Ongoing modules involving work on Genetic Algorithms, Game of Life, Min-Max algorithms with Alpha beta pruning and finally neural networks.",
        "Categories": "c++,ai,visualstudio"
    },
    {
        "Title": "Rake Mark Placement",
        "Subtitle": "Web and mobile development placement",
        "Thumbnail": "eQuiplogo.jpg",
        "ContentGallery" : "",
        "ContentText": "<h4>Introduction</h4> <p>In 2017-2018 I was working at a company called Rake Mark who is based in Stafford for my placement. The company specialises in Web development and database scripting and has multiple clients which they provide a service to. The main project that Rake Mark have and that I was able to work on was a suite of management software and websites called e-Quip used by multiple NHS departments around the country. The main piece of software is a desktop suite which allows the different departments to log calls, monitor and search for assets along with training new staff and audits (There are many more features but these are the ones I relate to). The software is installed on site and hosted on a T-SQL server. Rake Mark being a web development company were then hired to create a series of microsites with each performing one of the aforementioned tasks with the added bonus of it not needing to be installed on each computer. There are 4 microsites that I worked on whilst at Rake Mark: Job Logging, Ward Users, Simple Training and MTS (External extra project). </p> <h4>Microsites</h4> <p> I started off working on the Ward Users Microsite. This site acts as a Library for the nurses and doctors on a ward and allows them to search for an asset or job in a table, they are then able to click on a row and be shown in-depth details on the chosen item. I started off with little knowledge of HTML, Javascript and T-SQL and quickly learn my way around the app whilst being tasked with fixing basic bugs around it. I moved towards the customisabilty of the page which is done through the user updating an XML field which states what the data is and how to show it. The main difficulty with the added customisabilty of the site meant that when a user changed a field and clicked save we needed to ensure that all fields were saved to the database and were saved correctly using the specified data types. This was my first experience of using T-SQL with only a base use of MySql beforehand, quickly teaching me the different features of a Database including Tables, views and procs and how to use a profiling trace to view data transfers to work out where a bug occurs or why a table isn’t being updated. Originally the site only used basic HTML controls with each piece of data either sitting in a textbox or an outdated dropdown. I was tasked with finding solutions to displaying the plethora of different data e-Quip contains using newer dropdowns, and being able to build custom controls with javascript for currency fields with Net, gross and VAT and eventually moving on to creating a new server-side table view in which the user can specify the columns they wish to see and the dataset to display (with nothing pre-coded) allowing them to search through the data using pagination, custom filters, sorts and more with only the amount of rows displayed ever being brought back (If the page shows 10 rows we get 10 rather than the 30,000+ it could be). This task required me to perform my own tests and research on the solution and script up the table to ensure it is working as expected without much guidance only a specification and enabled me to learn Javascript and learn from my mistakes in code to build up a solution that also performed quickly due to a large amount of data the page might contain. </p> <h4>Ward Users</h4>&nbsp;<a href='https://warduser.e-quip.uk.net' target='_blank'>Link</a> <p> Whilst working on Ward Users I was also given the task of building up a new Job Logging site from scratch to mimic and improve on one created around 8 years beforehand. Similar to the other sites this uses ASP.Net and allowed me to gain a hands-on approach to setting up the site and how it’s file structure works. This site is more simplified than Ward Users allowing the user to select an asset and log a Job for it. I was tasked at first with simply rebuilding the site with a newer fresh look using Bootstrap 3 controls. Once completed I discussed with the project lead different ideas I had on improving the site and set to work on changing the drop down used to select the asset to be a table similar to the ones used in Ward Users that could display more data, along with making the fields the user filled in on the form also customisable via an XML which was a feature that was not used before. We used a lot of XML fields where possible due to each NHS department working differently, allowing them to only show the data they wish to be filled out. To improve on the speed of the site when logging a Job we moved away from using a PostBack when sending data to using API Post and JSON objects into a webmethod. This allowed the page to send the data and log the Job without the page refreshing, giving me a new insight into how an ASP.Net webpage’s life cycle works. We also included into the site a feature to allow an email to be sent when a Job is logged to the sender and technicians where required. Emailing requires a lot of information to be stored which we originally stored in the sites web config. We decided that we wanted the admins/managers to be able to log in somewhere securely and edit different parts of the site including the email settings without needing to access the web server. We both agreed on the idea of having an admin panel which would only be accessible by people with a set of permissions. I quickly went about building up a Login page utilising the existing security code for login in, researching how best to keep a password secure, and storing/creating a new session object storing relevant information about the user. The admin panel features a large number of settings that the admins/managers might wish to change so we needed a place to save them, we decided on using a Database table and using a proc to update where required. This was the first Table and proc I self-coded and taught myself how to use Linq, Entity framework and SQL Parameters to make the code more readable and secure. One extra part we added to the Admin section of the site was a Table with a list of Locations; in e-Quip there are a list of Locations that an asset might be located which are all set and managed by a user, There is also a Site field which might be a hospital with the locations being a ward. Due to a trust potentially having multiple Sites we built up this table to allow the admin/manager to tick all of the Locations and sites that they want the users to be able to see for their site, hiding all of the others allowing me to learn more in-depth Linq to filter incoming data and SQL select statements. Simple training was an improvement of an existing site training site with the requirements to make it more simplified to use. The idea of the training site is for a manager to be able to put their Nurses in a Competency group (How well they perform using a specific piece of equipment). Similar to Job Logging we decided that an Admin panel would be a good improvement to the site (Currently the manager did all of their work via the Desktop app). Using more Javascript, C# ASP and TSQL I created the new section of the Web App to allow the manager to set up competence groups and the equipment they contain followed by the nurses that used them, I then moved on to adding a section of the site where the manager could view the competency levels of a nurse or a group and then have the option to approve the specified competency level (Nurse says they are competent, manager agrees or disagrees). This section also included the Option to Excel Export tables to either a Crosstab or matrix report which I had to make sure was fully working with the new data and update where required. This site was my first major site where I was able to make a lot of suggestions on the functionality, Getting set a brief and being able to create the page or asset to fit the requirements without too much input from anyone else. </p> <img src='\\Thumbnails\\equiptraining.PNG' class='img-fluid w-50'> <img src='\\Thumbnails\\equiptraining2.PNG' class='img-fluid w-50'> <img src='\\Thumbnails\\equiptraining3.PNG' class='img-fluid w-50'> <img src='\\Thumbnails\\equiptraining4.PNG' class='img-fluid w-50'> <img src='\\Thumbnails\\equiptraining5.PNG' class='img-fluid w-50'> <img src='\\Thumbnails\\equiptraining6.PNG' class='img-fluid w-50'> <p>The training microsite along with the MTS project were the first two sites that I was able to work with the customer directly through secondary communication receiving their feedback and applying it where needed rather than working to just the specification of the company. MTS is a company within the NHS who service equipment for a number of different hospitals around central-south London. I was given the opportunity to work on a redesign for their dated website giving me the first project where I worked solo on a website fully for an external company. The site utilises e-Quip databases at a backend except the company uses the system to manage all the different hospitals' assets and jobs with each hospital having their own logins that they can use to view their specific ones. Starting with looking at the original design I set out redesigning the website to follow the same layout with newer controls and improved use of javascript (reducing the need of postbacks), this allowed me to self teach myself the use of CSS code to keep the design of the webpage consistent and easily customisable. Starting off with the basics I moved all of the original content over from the old site e.g. articles and downloads. Once the original items were moved i started to work on the tables / grid that the customers of the site would use to see their info, similar to Ward Users this site allows people to have a simplified (MTS specified) set of columns individual to each user, when the user clicks on the Asset or Job code for the specific item (hyperlinked table cell) they are shown a page with more in-depth details. Another requirement of this view was to add a printer friendly page that would act as a receipt this was something new me and needed base HTML code to keep everything on the page clean, The print-friendly view also contained the MTS company logo and the which the company needed the ability to update at any time with ease. For this, we created a login section, if you are one of the customers with an active account you will see your tables and data, if you log in with the admin information then you are taken to the admin section of the site where you can manage all aspects of the site. The admin site allows MTS to easily create new and edit existing accounts without the need to delve into their database, each customer has custom table columns for Jobs and Assets along with custom fields that they see in the details pages. To set up custom layouts for each customer I designed a modernised table which all available columns they could use are listed, the admin simply needs to tick the rows for all the fields or columns that they want the user to see along with the option to set a custom header/field name for each. In e-Quip there are also a lot of different ways to filter the large amounts of data you have including a “look for/look in” system and custom filters and sorts. Sorting already came with the table that we used for the customers (Infragistics Web Data Grid, although it’s dated it is used in Ward Users and existing code existed) and “look for look in” exists inward users meaning that it only needed to be moved over with the addition of having the MTS admins set which filters each customer can use. A “look for look in” filter works similar to an SQL statement where you say exactly what you want to look for and where using SQL Wildcard expressions, e.g. I want to find a “McKinley T34” asset so I might look for it by “McKinley” as a Brand or “T34” as a model, when the filter is applied is posts back the table applying all of the custom filters in the backend whilst keeping the users sort, page and restrictions. We also added Custom filters which are selectable via a modal, this is not something that is used in any of the other microsites currently and needed to be added into the tables filter code, when one type of filter is added the other one gets removed however the sort and pages must stay (Only bring back the data you can see, page is reset when a new filter is made just kept when changing). Once the filters were complete I set off completing the site which included adding the page for setting the company address and uploading their logo along with some additional small changes where required. </p> <h4>Mobile Development</h4> <p>My final project and the only one that is ongoing is a mobile app project for a Field service managing app which at first would work with e-Quip. Whilst I had worked on mobile development in my Games course at University this was my first hands-on experience working on a professional application. The aim of the application is to allow technicians that use e-Quip to be able to go around the hospital (or wherever their jobs are) fixing all of the assets and completing their jobs, rather than them having to then come back and type up all of their work at the end we wanted to give them the option to do all the work remotely there and then whilst utilising the features of a mobile phone to also reduce costs that an EBME department might have such as cameras and barcode readers. The app was first created by external personnel who started off the project in a basic setup, I was then given that app and tasked with building it up from the ground. The app is connected to a WebAPI that I also had to program (in .Net Core 2.0) which is connected to through Restful requests which are tokenised to make sure they are secure in regards to the device they are using and the specific person that is logged in. All data that is downloaded to the device is stored in a singleton central environment which allows all data to be accessed anywhere around the app whilst also saving data (converted to JSON strings) to file for offline use. My knowledge of Android development was minimal when I started meaning that I had to do a lot of research into different solutions for the app whilst making sure that they would work well for the customers we had due to a lot of them not being advanced tech users meaning they need things to be simplified. The app features barcode scanning, location tracking and the ability to upload photographs as attachments to a Job whilst also allowing users to add manage their jobs and view lists of assets. The app was fully programmed by myself and the company aims to release it as a commercial product as soon as possible. Starting with the Jobs section of the App I created a list view which would easily show a list of all Jobs that were assigned to that user, the user could then filter through that list via a search box searching through a few different fields (e.g. Job codes and descriptions) I eventually turned the list layout to run through a service that would also allow me to create other lists views a lot easier, therefore adding in ones for assets and audits. The Jobs view is the main section of the app, we went through a few iterations of design for this section using tabbed layouts and separate pages for each section before finally moving to use fragments and drawer layouts (similar to the Google Maps app where you can slide up from the bottom for more info). The main section of the jobs view was tweaked to give a configurable list of information on the Job moving all of the interactable sections into the bottom slide up parts on their own tabs (to separate them up to improve usability). The app is still in development with the main feature that we are currently working on being a tracking system that utilises the phones GPS to live track a user whilst also tracking their Journey which starts and stops with entering and leaving a Geofence respectively or through button actions in the Job view (if they have a button to say they are no longer travelling) This has been the most complex task that I have had to work with due to it being quite difficult to test, simply through not being able to go on test journeys and when we do we are often affected by external difficulties such as buildings blocking GPS signals or erroneous data. We programmed defensively for this and built an algorithm to improve a route once it is completed, this includes removing any duplicate points on a map and working out if any points are “out of place” and shouldn’t be there. We utilised a lot of Google API tools for the app including the Roads API to snap all the locations we have tracked for a route to a page and then building up a Web panel and using a Google Maps display to show the route to a manager. </p> <h4>Play store release</h4>&nbsp;<a href='https://play.google.com/store/apps/details?id=eQuipAndroid.eQuipAndroid' target='_blank'>Link</a> <br> <h4>Final Notes</h4> <p> Overall I have learnt a lot through my year working at Rake Mark with my supervisor giving me a lot of freedom to work things out for myself and perform research in many different ways to learn. I feel I have improved through the year in how best to bring up points with my supervisor and the team in a way that is more articulated, having reasoning behind me plans and the confidence to be able to make them happen. The Android application which has been the biggest project I have worked on was a chance for me to learn a completely new field that although I had some previous linked knowledge it had not had the chance to do before. Developing the app allowed me to have freedom in my designs and structure my planning in a way that made aspects of the app work for everyone, I was the sole programmer on the app for the majority of the time and this allowed me to learn the process of taking a specification from my supervisors or a customers feature requests and trying to make them happen. </p> <h4>Rake Mark</h4>&nbsp;<a href='http://http://www.rakemark.com/' target='_blank'>Link</a> <h4>e-Quip</h4>&nbsp;<a href='http://www.e-quip.uk.net/' target='_blank'>Link</a>",
        "Categories": "c#,html,css,js,xamarin,visualstudio"
    },
    {
        "Title": "AI Tanks",
        "Subtitle": "Pathinding and Finite state machines for AI",
        "Thumbnail": "tanks.PNG",
        "ContentGallery" : "",
        "ContentText": "<h4>Introduction</h4> <p>Starting with a basic framework which contained a \"Dumb\" tank that had simple code to move to a point. The challenge of this module was to add pathfinding (A*) and decision making to help my tank win a battle against others. I was able to create a leading tank which is shown in the video below (purple tank). <i>Note that the other tanks were unavailable to show</i> </p> <iframe width='100%' height='450px' src='https://www.youtube.com/embed/xFz9gQKbB14' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe><h4>Github</h4>&nbsp;<a href='https://github.com/POYTEBUSH/UniWork_AI/tree/master/GameAI/GameAI/PeterBush' target='_blank'>Link</a>",
        "Categories": "c++,ai,visualstudio"
    },
    {
        "Title": "Icy Climber",
        "Subtitle": "Group based Android game project",
        "Thumbnail": "icyclimber.png",
        "ContentGallery" : "", 
        "ContentText": "<h4>Introduction</h4> <p>Icy Climber was an Android game developed in Love2D Lua aimed at a younger audience, the game was developed as part of a team module and was pitched infront of developers at Playground Games. </p> <iframe width='100%' height='450px' src='https://www.youtube.com/embed/Jlb6hLQqxrg' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe> <h4>My Involvement</h4> <p> My main involment in this project was taking the role of Team Manager, I was in charge of the tasks that each member took part of, the Github and its commits and helped to organise group meetings. </p><p>Along with my project managment role I also helped to work on the overall games development, from discussing different ideas with the team and working out solutions for each. I also was set the main graphics design role, creating or finding copy-right free images that we could use in the game. </p> <h4>Pitching to Playground Games</h4> <p> As previously mentioned, the team was given the oportunity to go to Playground Games' Headquatres and pitch the game and its design to a few developers. The aim of the pitch was to act like it was for a new release that we aimed to recieve funding for. The pitch required each team member to present their sections of the game to the audience, showing ideas for how they would improve their section and the future plans for the game. </p> <p>Overall our game was voted to be the most complete game and we impressed in our presentation.</p> <h4>Github</h4>&nbsp;<a href='https://github.com/POYTEBUSH/IcyClimber' target='_blank'>Link</a>",
        "Categories": "lua,groupbased"
    },
    {
        "Title": "Rocket Ball",
        "Subtitle": "Physics in DirectX 11 C++",
        "Thumbnail": "thumb1.jpg",
        "ContentGallery" : "",
        "ContentText": "<h4>Introduction</h4> <p>I have created a game called Rocket Ball for this project and Involves the use of DirectX11 to complete many different rendering techniques and styles by passing render data between multiple shaders. The game was then improvved to handle physics and collisions to replicate a game similar to Rocket League.</p> <h4>Player Controls</h4> <ul> <li> <p>Player</p> <ul> <li> <p><kbd>W</kbd>&nbsp;Moves the car forwards with a force in relation to its mass</p> <p><kbd>A</kbd>&nbsp;Moves the car Left-ways with a force in relation to its mass</p> <p><kbd>S</kbd>&nbsp;Moves the car backwards with a force in relation to its mass</p> <p><kbd>D</kbd>&nbsp;Moves the car Right-way with a force in relation to its mass</p> <p><kbd>Space</kbd>&nbsp;Jump</p> </li> </ul> <p>Camera</p> <ul> <li> <p><kbd>1</kbd>&nbsp;Free camera controlled via the mouse</p> <p><kbd>2</kbd>&nbsp;Arena / Spectator Camera</p> <p><kbd>3</kbd>&nbsp;Follow Camera that stays behind the player</p> <p><kbd>4</kbd>&nbsp;Top Camera above the player</p> </li> </ul> <p>Acceleration</p> <ul> <li> <p><kbd>5</kbd>&nbsp;Move at constant Acceleration</p> <p><kbd>6</kbd>&nbsp;move at constant velocity</p> </li> </ul> </li> </ul> <h4>The Game</h4> <p>This game utilises a physics system programmed in C++ using a combination of Mass Aggregate and a rigid body system to simulate a football field with extra features. Each game object in the game is assigned an Appearance (how it looks and its geometry) a Transform (where it is located in world space, its rotation and its scale) and a Particle Model which is used to apply forces and update the position and rotation in relation to them. Each particle model is initialised to have values for its acceleration and velocity along with a pointer to the game objects transform, allowing for the transformation of the object. We also pass into the particle model constructer a collision radius for spherical based collisions, a mass to allow calculation of weight in relation to gravity and a Boolean to specify  whether or not the game object is affected by gravity or not (allows for assets such as the arena to be ignored). In the constructor of this class, I also specify the flow and move type of the object that are both enums. </p> <code> enum FlowType { NOTSET, LAMINAR, TURBULENT }; </code> <br> <code> enum MoveType { CONSTACCELL, CONSTVEL }; </code> <p>When the game has a certain FlowType assigned the velocity will slow down with a calculation of drag force in relation to its drag factor and the overall weight of the object. The movement type will specify the calculations for the movement / displacement of the game object each frame in relation to the net force added. At each frame I make sure that all forces are removed and the net force and acceleration are cleared. I use the method AddForce(Vector3D force) which takes in a Vector based force and will push it onto the vector stack, I then call my update for the particle model which firstly will update the momentum and position values to be correct and then assigns a gravity vector if A. it is affected by it and B. if the game objects y position is greater than 0.0f and then if the object is less than 0.05f on the y axis then a resultant force to weight is applied to simulate the effect of the object bouncing. After the gravity and resultant force is applied I then update the net force which is calculated as a vector and uses a for loop to iterate through all values in the forces vector stack and add them to the running total for the net force. This value is then used to calculate the total the acceleration of the object.</p> <p>If the move at constant acceleration is chosen then the equations S=UT + 0.5 * AT¬2 and V = U + AT which calculate the displacement and change in velocity at each frame respectively.</p> <p>The value of 0.017 is the time step that allows this calculation to be corresponding with the 60FPS lock that the game is set to. Once these two formulas are calculated I follow up by making the velocity get reduced by the drag factor which allows for the object to progressively slow down until it is fully stationary. When using move forwards at a constant velocity I simply use the method of taking the current position and adding the velocity + time step. </p> <h4>Collisions</h4> <p>I use two different collision calculations for my game, one is a Sphere to sphere and the other is a Sphere to AABB (Axis aligned bounding Box). The sphere to sphere calculation takes into account the centre position of both spheres and their radii; The calculation simply aim to check whether or not the distance between the two centre points is smaller than the radius of the sphere.</p> <p>When a game object hits the bounds of the arena the object will bound off the wall with a velocity that is the dot product of the original velocity flipped and the collision normal of the wall: object->SetVelocity(object->GetVelocity().DotProduct(Vector3D(-1.0f, 0.0f, 0.0f))); The ball and the player also collide where the velocity of the objects are set to be their current velocity – the momentum of the collider / the current objects mass. </p> <p>My particle system works by instantiating a set number of game objects into a vector stack and then applying a similar force to them all from an emitter point, Using object pooling I am able to move the objects with the forces and then when they hit the specified max height they are moved back to the emmiter point to move again. <br><code> ParticleSystem(int NumOfParticles, GameObject* Particle, Vector3D startPos, float maxHeight);</code> The designer is able to pass in any already instantiated game object to the particle system along with the number of objects in the system and their max height, they can also choose between a spray effect and a fountain effect where the particles will move in a different way using the <br><code>void SetParticleSystemEffect(ParticleSystemType type) { mSystemType = type; };</code> Due to all of the particles being smaller game objects without colliders they are drawn in the same way to the screen and updated also. </p>",
        "Categories": "c++,directx11,physics"
    }
]